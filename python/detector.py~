# Note: Run this file from the root directroy like the below.
# > python python/detector.py 

import numpy as np
import cv2
import json, os, csv
from pprint import pprint
from collections import defaultdict


publidDir = os.path.abspath( os.getcwd() + '/public' )
imagePath = publidDir + "/dataset/1.png"
jsonConfigFile = publidDir + "/data/coordinates1.json"
csvFilePath = publidDir + "/data/metrics3.csv"
threshold = {
	0 :  0.355,
	1 : 3.3,
	2 : 0.5,
	3 : 1
}

class ColorHistogram(object):

	def __init__(self, args):
		self.image = args.get('image', None)

	def getHueHistogram(self, minSaturation=0):
		# Convert the image to HSV space
		hsv = cv2.cvtColor(self.image, cv2.COLOR_BGR2HSV)

		mask = None

		# Mask out the low saturated pixels
		if(minSaturation > 0):
			hue, saturation, value = cv2.split(self.image)
			retval, mask = cv2.threshold(saturation, minSaturation, 255, cv2.THRESH_BINARY)

		# calculate 1D histogram
		hueRanges = [0, 180]
		hist = cv2.calcHist(
			[self.image], # list of images
			[ 0 ],	# compute histogram for the HUE channel('0' index) alone
			mask,	# Mask for elimiating low saturation values
			[ 180 ],	# Number of histogram bins
			hueRanges	# range to compute histogram  
		)
		hist = cv2.normalize(hist, hist, 0, 1, cv2.NORM_MINMAX)
#		print "hist: {0}".format(str(json.dumps(hist)))

		return hist

class ImageComparator(object):
	def __init__(self, args):
		self.colorReductionFactor = args.get('colorReductionFactor', None)
		self.minSaturation = args.get('minSaturation', 0)

		self.referenceImage = args.get('referenceImage', None)
		self.referenceHistogram = args.get('referenceHistogram', ColorHistogram({
			'image' : self.referenceImage
		}).getHueHistogram(self.minSaturation))


	def compare(self, inputImage, methodDict):
		inputImageHistogram = ColorHistogram({
			'image' : inputImage
		}).getHueHistogram(self.minSaturation)

		#print "\t\t--------------"
		for method in xrange(4):
			result = cv2.compareHist(self.referenceHistogram, inputImageHistogram, method)
			methodDict[method].append({'id': method, 'result': round(result, 3)})
			#print "Method {0}: {1}".format(method, result)

	def compareDiff(self, inputImage):
		grayscaleBackground = cv2.cvtColor(self.referenceImage, cv2.COLOR_BGR2GRAY)
		grayscaleImage = cv2.cvtColor(inputImage, cv2.COLOR_BGR2GRAY)
		diff = cv2.absdiff(grayscaleBackground, grayscaleImage)

 		# return only the first index since sumElems outputs 4 channels and only the first one is
 		# filled for a grayscale image here.
		return cv2.sumElems(diff)[0]


# Does img[y: y + h, x: x + w]
def getPatchFromImage(image, x, y, w, h):
	x, y = x-w/2, y+h/2
	return image[y: y + h, x: x + w]

image = cv2.imread(imagePath, cv2.IMREAD_COLOR)

# Resize the image by exactly half
# resizedImage = cv2.resize(img, (0, 0), fx=0.5, fy=0.5)

# read the config json file that contains reference patch and the parking lot informations
# {
# 	'parkingspaces'	: [
#		[x1, y1],	# point(x,y) of the mouse selection which will be the midpoint of the parking patch
#		[x2, y2],
#		....
#	],
#	'refX': x, # x-coordinate of the reference patch
#	'refX': y, # y-coordinate of the reference patch
#	'width' : width,
#	'height' : height,
# }

datadict = defaultdict(dict)
imageComparator = None
width, height = (0, 0)
methodDict = {
	0 : [],
	1 : [],
	2 : [],
	3 : [],
}

imageDiffList = []

# A list that holds image for displaying accuracy for each method
imageList = []

with open(jsonConfigFile) as data_file:
	coordinatesData = json.load(data_file)

	width, height = (coordinatesData['width'], coordinatesData['height'])
	referenceImage = getPatchFromImage(image, coordinatesData['refX'], coordinatesData['refY'], width, height)

	# load the reference image
	imageComparator = ImageComparator({
		'referenceImage' : referenceImage
	})

	index = 1
	for parkingRow in coordinatesData['parkingspaces']:
		patchImage = getPatchFromImage(image, parkingRow['x'], parkingRow['y'], width, height)
		print "No: %d" % (index)

		imageComparator.compare(patchImage, methodDict)

		imageDiffList.append(imageComparator.compareDiff(patchImage))
		index += 1

	print "ImageDiff method:"
	index = 1
	string=""
	for data in imageDiffList:
		string += str(data) + ","
		#print "{0},".format(str(data))
		index += 1	
	print string
	print "------\n"

	for key in methodDict:
		print "method: %d" %(key)

		index = 0
		imageListIndex = int(key)
		imageList.append(image.copy())

		cv2.circle(
			imageList[imageListIndex], # image on whose circle has to be drawn
			(coordinatesData['refX'], coordinatesData['refY']),	# center co-ordinates
			15,	# radius
			(255,255,0), # color of the circle
			-1  # -1 thickness refers to fill the circle with the given color
		)

		for data in methodDict[key]:
			print "{0},".format(data['result']),
			x = coordinatesData['parkingspaces'][index]['x']
			y = coordinatesData['parkingspaces'][index]['y']
			index += 1

			# draws a circle filled in green if the value is above the threshold
			# and in red otherwise
			color = (0, 255, 0)
			if(data['result'] < threshold[key]):
				color = (0, 0, 255)

			cv2.circle(
				imageList[imageListIndex], # image on whose circle has to be drawn
				(x, y),	# center co-ordinates
				15,	# radius
				color, # color of the circle
				-1  # -1 thickness refers to fill the circle with the given color
			)

			# Puts the index in the center of the circle
			cv2.putText(
				imageList[imageListIndex], # Image on which the text has to be drawn
				str(index), # text will be the index
				(x,y), # co-ordinates
				cv2.FONT_HERSHEY_SIMPLEX, # font type
				1,	# font size or scale
				(255,255,255), # color of the text
				1 # thickness of the lines used to draw the text
			)

		print "------\n"

	imageListIndex = len(imageList)
	imageList.append(image.copy())
	print "imagelist index: %d"%(len(imageList))
	cv2.circle(
		imageList[imageListIndex], # image on whose circle has to be drawn
		(coordinatesData['refX'], coordinatesData['refY']),	# center co-ordinates
		12,	# radius
		(255,255,0), # color of the circle
		-1  # -1 thickness refers to fill the circle with the given color
	)

	index = 0
	for data in imageDiffList:
		data = int(data)
		x = coordinatesData['parkingspaces'][index]['x']
		y = coordinatesData['parkingspaces'][index]['y']
		

		# draws a circle filled in green if the value is above the threshold
		# and in red otherwise
		color = None

		print "{0}: {1}".format(index, data)
		if(data > 15000):
			color = (0, 0, 255)
			print "\tmarking it red"
		else:
			color = (0, 255, 0)
			print "\tmarking it green"

		index += 1
		cv2.circle(
			imageList[imageListIndex], # image on whose circle has to be drawn
			(x, y),	# center co-ordinates
			12,	# radius
			color, # color of the circle
			-1  # -1 thickness refers to fill the circle with the given color
		)

		# Puts the index in the center of the circle
		cv2.putText(
			imageList[imageListIndex], # Image on which the text has to be drawn
			str(index), # text will be the index
			(x,y), # co-ordinates
			cv2.FONT_HERSHEY_SIMPLEX, # font type
			0.7,	# font size or scale
			(255,255,255), # color of the text
			1 # thickness of the lines used to draw the text
		)


cv2.namedWindow('image', cv2.WINDOW_NORMAL)
cv2.namedWindow('method 0', cv2.WINDOW_NORMAL)
cv2.namedWindow('method 1', cv2.WINDOW_NORMAL)
cv2.namedWindow('method 2', cv2.WINDOW_NORMAL)
cv2.namedWindow('method 3', cv2.WINDOW_NORMAL)

cv2.imshow('image', image)
cv2.imshow('method 0', imageList[0])
cv2.imshow('method 1',  imageList[1])
cv2.imshow('method 2',  imageList[2])
cv2.imshow('Image diff',  imageList[4])

cv2.waitKey(0)
cv2.destroyAllWindows()
